version: '3.6'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - localnet
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka:5.1.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - localnet
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:5.1.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    networks:
      - localnet
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  ksql-server:
    image: confluentinc/cp-ksql-server:5.1.1
    hostname: ksql-server
    container_name: ksql-server
    depends_on:
      - broker
#      - connect
    ports:
      - "8088:8088"
    networks:
      - localnet
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: "broker:9092"
      KSQL_HOST_NAME: ksql-server
      KSQL_APPLICATION_ID: "cp-all-in-one"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_AUTO_OFFSET_RESET: "earliest"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.1.1
    container_name: ksql-cli
    depends_on:
      - broker
#      - connect
      - ksql-server
    networks:
      - localnet
    entrypoint: /bin/sh
    tty: true

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    networks:
      - localnet
    environment:
      KAFKA_BROKERCONNECT: "broker:9092"
      SCHEMAREGISTRY_CONNECT: "http://schema-registry:8081"
    depends_on:
      - broker
      - schema-registry

  kafka-create-topics:
    container_name: create-kafka-topics
    image: confluentinc/cp-kafka:5.1.1
    depends_on:
      - broker
    hostname: kafka-create-topics
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       sleep 10 && \
                       cub kafka-ready -b broker:9092 1 20 && \
                       kafka-topics --create --topic comments-stream --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 && \
                       sleep infinity'"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      - localnet

  mongo:
    image: "mongo:4.0-xenial"
    container_name: mongo
    networks:
      - localnet
    ports:
      - "27017:27017"
    restart: always

  producer:
    build:
      context: producer/
      dockerfile: Dockerfile
    ports:
      - "8080-8090"
    depends_on:
      - broker
      - schema-registry
    networks:
      - localnet

  sentiment-detection-service:
    container_name: sentiment-detection-service
    build:
      context: sentiment-detection-service/
    networks:
      - localnet

  lang_detector:
    build:
      context: lang_detector/
      dockerfile: Dockerfile
    ports:
      - "8060-8070"
    depends_on:
      - broker
      - schema-registry
    networks:
      - localnet

  keyword-detection-service:
    build:
      context: keyword-detection-service/docker/stage/
      dockerfile: Dockerfile
    depends_on:
      - broker
      - schema-registry
    networks:
      - localnet
    environment:
      WRITE_TOPIC: "keyword-stream"
      READ_TOPIC: "comments-stream"
      APPLICATION_ID: "keyword-detection-service232"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KAFKA_BROKER_URL: "broker:9092"

networks:
  localnet:
    attachable: true